name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "9"

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint check
        run: pnpm run lint

      - name: Format check
        run: pnpm run format:check

      - name: Security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

  # Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit
        env:
          CI: true

      - name: Generate coverage report
        run: pnpm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

      - name: Coverage gate check
        run: |
          COVERAGE=$(npm run test:coverage --silent | grep -oP 'Lines.*?(\d+\.?\d*)%' | grep -oP '\d+\.?\d*')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below 90% threshold"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets 90% threshold"
          fi

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          CI: true

      - name: Upload E2E results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Analyze bundle size
        run: pnpm run analyze

      - name: Bundle size check
        run: |
          BUNDLE_SIZE=$(du -sk .next/static/chunks | cut -f1)
          echo "Bundle size: ${BUNDLE_SIZE}KB"
          if [ $BUNDLE_SIZE -gt 1000 ]; then
            echo "‚ùå Bundle size ${BUNDLE_SIZE}KB exceeds 1MB threshold"
            exit 1
          else
            echo "‚úÖ Bundle size ${BUNDLE_SIZE}KB is within 1MB threshold"
          fi

      - name: Run performance tests
        run: pnpm run test:performance

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security tests
        run: pnpm run test:security

      - name: Run dependency vulnerability scan
        run: pnpm audit --audit-level=moderate

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "FE-Engine-Prime"
          path: "."
          format: "HTML"

      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports/
          retention-days: 7

  # Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Check build artifacts
        run: |
          if [ ! -d ".next" ]; then
            echo "‚ùå Build artifacts not found"
            exit 1
          fi
          echo "‚úÖ Build artifacts validated"

      - name: Test build startup
        run: |
          timeout 30s pnpm start &
          SERVER_PID=$!
          sleep 10
          if curl -f http://localhost:3000; then
            echo "‚úÖ Build starts successfully"
          else
            echo "‚ùå Build failed to start"
            exit 1
          fi
          kill $SERVER_PID

  # Quality Gate Summary
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs:
      [code-quality, unit-tests, e2e-tests, performance-tests, security-tests, build-validation]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quality Gate Summary
        run: |
          echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job results
          CODE_QUALITY="${{ needs.code-quality.result }}"
          UNIT_TESTS="${{ needs.unit-tests.result }}"
          E2E_TESTS="${{ needs.e2e-tests.result }}"
          PERFORMANCE="${{ needs.performance-tests.result }}"
          SECURITY="${{ needs.security-tests.result }}"
          BUILD="${{ needs.build-validation.result }}"

          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | $([[ $CODE_QUALITY == 'success' ]] && echo '‚úÖ PASS' || echo '‚ùå FAIL') |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | $([[ $UNIT_TESTS == 'success' ]] && echo '‚úÖ PASS' || echo '‚ùå FAIL') |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | $([[ $E2E_TESTS == 'success' ]] && echo '‚úÖ PASS' || echo '‚ùå FAIL') |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | $([[ $PERFORMANCE == 'success' ]] && echo '‚úÖ PASS' || echo '‚ùå FAIL') |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | $([[ $SECURITY == 'success' ]] && echo '‚úÖ PASS' || echo '‚ùå FAIL') |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | $([[ $BUILD == 'success' ]] && echo '‚úÖ PASS' || echo '‚ùå FAIL') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall result
          if [[ $CODE_QUALITY == 'success' && $UNIT_TESTS == 'success' && $E2E_TESTS == 'success' && $PERFORMANCE == 'success' && $SECURITY == 'success' && $BUILD == 'success' ]]; then
            echo "### üéâ All Quality Gates PASSED!" >> $GITHUB_STEP_SUMMARY
            echo "The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Quality Gates FAILED!" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the failing checks before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'code-quality': '${{ needs.code-quality.result }}',
              'unit-tests': '${{ needs.unit-tests.result }}',
              'e2e-tests': '${{ needs.e2e-tests.result }}',
              'performance-tests': '${{ needs.performance-tests.result }}',
              'security-tests': '${{ needs.security-tests.result }}',
              'build-validation': '${{ needs.build-validation.result }}'
            };

            const allPassed = Object.values(results).every(result => result === 'success');
            const emoji = allPassed ? 'üéâ' : '‚ùå';
            const status = allPassed ? 'PASSED' : 'FAILED';

            const body = `## ${emoji} Quality Gates ${status}

            | Check | Status |
            |-------|--------|
            ${Object.entries(results).map(([check, result]) =>
              `| ${check.replace('-', ' ')} | ${result === 'success' ? '‚úÖ PASS' : '‚ùå FAIL'} |`
            ).join('\n')}

            ${allPassed ?
              'üöÄ All checks passed! This PR is ready for review.' :
              '‚ö†Ô∏è Some checks failed. Please fix the issues before merging.'
            }`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Deployment (only on main branch success)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && needs.quality-gate.result == 'success'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm run build

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your deployment script here
          # Example: deploy to Vercel, Netlify, AWS, etc.

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add smoke test commands here
          # Example: curl checks, basic E2E tests

      - name: Promote to production
        if: success()
        run: |
          echo "üéØ Promoting to production..."
          # Add production deployment script here
